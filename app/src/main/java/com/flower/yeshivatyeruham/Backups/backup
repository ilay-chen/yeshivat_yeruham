package com.flower.yeshivatyeruham;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
//import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.support.annotation.NonNull;
//import android.support.annotation.RequiresApi;
import android.support.design.widget.Snackbar;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
//import android.app.LoaderManager.LoaderCallbacks;
import android.content.ContentResolver;
//import android.content.CursorLoader;
//import android.content.Loader;
//import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build.VERSION;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.GenericTypeIndicator;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.messaging.FirebaseMessaging;

import java.util.ArrayList;
import java.util.List;

import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;

import static android.Manifest.permission.READ_CONTACTS;
import static com.flower.yeshivatyeruham.SettingsFragment.getNumberAsString;

/**
 * A login screen that offers login via email/password.
 */
//@RequiresApi(api = Build.VERSION_CODES.HONEYCOMB)
public class LoginActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor> {

    /**
     * Id to identity READ_CONTACTS permission request.
     */
    private static final int REQUEST_READ_CONTACTS = 0;

    /**
     * Keep track of the login task to ensure we can cancel it if requested.
     */
    static UserLoginTask mAuthTask = null;

    private static DatabaseReference mDatabase;
    private static List<AppUser> appUsers = new ArrayList<AppUser>();

    // UI references.
    private AutoCompleteTextView mEmailView;
    private static EditText mPasswordView;
    private static View mProgressView;
    private static View mLoginFormView;
    static Context context;
    public static Boolean isNumVerify = false;

    @Override
    protected void attachBaseContext(Context newBase) {
        super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        context = this;

        setTheme(R.style.AppTheme);

        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_login);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);

//        Intent notification = getIntent();
//        if((notification.getStringExtra("data") != null &&
//                !notification.getStringExtra("data").equals(""))
//                && isAlreadyConnected())
//        {
//            saveNotification(notification);
//            Intent i = new Intent(getBaseContext(), MessageDialog.class);
//            i.putExtras(notification.getExtras());
//            startActivity(i);
//            finish();
//        }
//        else
        if (isAlreadyConnected())
        {
            Intent i = new Intent(getBaseContext(), MainActivity.class);
            startActivity(i);
            finish();
        }

        // Set up the login form.
        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);
        populateAutoComplete();
        mEmailView.requestFocus();

        mPasswordView = (EditText) findViewById(R.id.password);
        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;
                }
                return false;
            }
        });

        mDatabase = FirebaseDatabase.getInstance().getReference();

//        AppUser au = new AppUser("yhyUser","yhy12345","1");
//        List users = new ArrayList();
//        users.add(au);
//
//        // Write a message to the database
//        FirebaseDatabase database = FirebaseDatabase.getInstance();
//        DatabaseReference myRef = database.getReference("allData");
//
//        myRef.child("users").setValue(users);


        Button mEmailSignInButton = (Button) findViewById(R.id.email_sign_in_button);
        mEmailSignInButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                attemptLogin();
            }
        });

        mLoginFormView = findViewById(R.id.login_form);
        mProgressView = findViewById(R.id.login_progress);
    }

    private void populateAutoComplete() {
        if (!mayRequestContacts()) {
            return;
        }

        if (VERSION.SDK_INT >= 14) {
            // Use ContactsContract.Profile (API 14+)
//            getLoaderManager().initLoader(0, null, this);
            getSupportLoaderManager().initLoader(0, null, this);
        } else if (VERSION.SDK_INT >= 8) {
            // Use AccountManager (API 8+)
            new SetupEmailAutoCompleteTask().execute(null, null);
        }
    }

    private boolean mayRequestContacts() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            return true;
        }
        if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
            Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
                    .setAction(android.R.string.ok, new View.OnClickListener() {
                        @Override
//                        @TargetApi(Build.VERSION_CODES.M)
                        public void onClick(View v) {
                            if (VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                                requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
                            }
                        }
                    });
        } else {
            requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
        }
        return false;
    }

    private void saveNotification(Intent notification) {

        String text = notification.getStringExtra("data");
        String link = notification.getStringExtra("link");
        String title = notification.getStringExtra("title");
        SharedPreferences sharedPref = getSharedPreferences(getString(R.string.savedNtf), MODE_PRIVATE);

        String titles = sharedPref.getString(getString(R.string.savedNtf_titles), "");
        String texts = sharedPref.getString(getString(R.string.savedNtf_texts), "");
        String links = sharedPref.getString(getString(R.string.savedNtf_links), "");

        SharedPreferences.Editor editor = sharedPref.edit();
        editor.putString(getString(R.string.savedNtf_titles), title + "<^>" + titles);
        editor.putString(getString(R.string.savedNtf_texts), text + "<^>" + texts);
        editor.putString(getString(R.string.savedNtf_links), link + "<^>" + links);

//        editor.putString(getString(R.string.savedNtf_titles), "");
//        editor.putString(getString(R.string.savedNtf_texts), "");
//        editor.putString(getString(R.string.savedNtf_links), "");

        editor.apply();
    }


    /**
     * Callback received when a permissions request has been completed.
     */
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        if (requestCode == REQUEST_READ_CONTACTS) {
            if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                populateAutoComplete();
            }
        }
    }


    /**
     * Attempts to sign in or register the account specified by the login form.
     * If there are form errors (invalid email, missing fields, etc.), the
     * errors are presented and no actual login attempt is made.
     */
    private void attemptLogin() {
        if (mAuthTask != null) {
            return;
        }
        InputMethodManager inputMethodManager = (InputMethodManager)this.getSystemService(Context.INPUT_METHOD_SERVICE);
        inputMethodManager.hideSoftInputFromWindow(this.getCurrentFocus().getWindowToken(), 0);

        // Reset errors.
        mEmailView.setError(null);
        mPasswordView.setError(null);

        // Store values at the time of the login attempt.
        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(email)) {
            mEmailView.setError(getString(R.string.error_field_required));
            focusView = mEmailView;
            cancel = true;
        } else if (!isEmailValid(email)) {
            mEmailView.setError(getString(R.string.error_invalid_email));
            focusView = mEmailView;
            cancel = true;
        }

        if (cancel) {
            // There was an error; don'createTrd attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            showProgress(true);
            mAuthTask = new UserLoginTask(email, password);
            mAuthTask.execute((Void) null);
        }
    }

    private boolean isEmailValid(String email) {
        //TODO: Replace this with your own logic
        return true;
        //return email.contains("@");
    }

    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logic
        return password.length() > 4;
    }

    /**
     * Shows the progress UI and hides the login form.
     */
//    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    private static void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = context.getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
            mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                }
            });

            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mProgressView.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    @Override
    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
        if (Build.VERSION.SDK_INT >= 11)
        return new CursorLoader(this,
                // Retrieve data rows for the device user's 'profile' contact.
                Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
                        ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,

                // Select only email addresses.
                ContactsContract.Contacts.Data.MIMETYPE +
                        " = ?", new String[]{ContactsContract.CommonDataKinds.Email
                .CONTENT_ITEM_TYPE},

                // Show primary email addresses first. Note that there won'createTrd be
                // a primary email address if the user hasn'createTrd specified one.
                ContactsContract.Contacts.Data.IS_PRIMARY + " DESC");

        //check what happed if this is true..
        return null;
    }

    @Override
    public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {
        List<String> emails = new ArrayList<>();
        cursor.moveToFirst();
        while (!cursor.isAfterLast()) {
            emails.add(cursor.getString(ProfileQuery.ADDRESS));
            cursor.moveToNext();
        }

        SharedPreferences sharedPref = getSharedPreferences("strings", MODE_PRIVATE);
        String []users = sharedPref.getString("users","").split(",");
        for (String email: users) {
            emails.add(email);
        }

        addEmailsToAutoComplete(emails);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> cursorLoader) {

    }

    private void addEmailsToAutoComplete(List<String> emailAddressCollection) {
        //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
        ArrayAdapter<String> adapter =
                new ArrayAdapter<>(LoginActivity.this,
                        android.R.layout.simple_dropdown_item_1line, emailAddressCollection);

        mEmailView.setAdapter(adapter);
    }

    private interface ProfileQuery {
        String[] PROJECTION = {
                ContactsContract.CommonDataKinds.Email.ADDRESS,
                ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
        };

        int ADDRESS = 0;
        int IS_PRIMARY = 1;
    }

    /**
     * Use an AsyncTask to fetch the user's email addresses on a background thread, and update
     * the email text field with results on the main UI thread.
     */
    class SetupEmailAutoCompleteTask extends AsyncTask<Void, Void, List<String>> {

        @Override
        protected List<String> doInBackground(Void... voids) {
            ArrayList<String> emailAddressCollection = new ArrayList<>();

            // Get all emails from the user's contacts and copy them to a list.
            ContentResolver cr = getContentResolver();
            Cursor emailCur = cr.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI, null,
                    null, null, null);
            while (emailCur.moveToNext()) {
                String email = emailCur.getString(emailCur.getColumnIndex(ContactsContract
                        .CommonDataKinds.Email.DATA));
                emailAddressCollection.add(email);
            }
            emailCur.close();

            return emailAddressCollection;
        }

        @Override
        protected void onPostExecute(List<String> emailAddressCollection) {
            addEmailsToAutoComplete(emailAddressCollection);
        }
    }

    /**
     * Represents an asynchronous login/registration task used to authenticate
     * the user.
     */
    public static class UserLoginTask extends AsyncTask<Void, Void, Boolean> {

        private final String mEmail;
        private final String mPassword;

        UserLoginTask(String email, String password) {
            mEmail = email;
            mPassword = password;
        }

        @Override
        protected Boolean doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.

            mDatabase.child("allData").child("users").addListenerForSingleValueEvent(
                    new ValueEventListener() {
                        @Override
                        public void onDataChange(DataSnapshot dataSnapshot) {
                            // Get user value

                            for (DataSnapshot postSnapshot : dataSnapshot.getChildren()) {
                                //<Event> ev = dataSnapshot.getValue();
                                GenericTypeIndicator<List<AppUser>> t = new GenericTypeIndicator<List<AppUser>>() {};
                                appUsers = dataSnapshot.getValue(t);
                            }
//                            GenericTypeIndicator<String> createTrd = new GenericTypeIndicator<String>() {};
//                            users = dataSnapshot.getValue(createTrd);

                            Boolean succes = false;

                            for (AppUser user : appUsers) {
                                String userName = user.getName();
                                if (userName.equals(mEmail)) {
                                    // Account exists, return true if the password matches.
                                    if(user.getPass().equals(mPassword)) {
                                        succes = true;
                                        finishLogin(true, user.getName(), user.getPass(),
                                                user.getClassification(), user.getClassName());
                                        saveEmail(mEmail);
                                        break;
                                    }
                                }
                            }

                            if(!succes)
                            finishLogin(false,"","",-1,-1);
                        }

                        @Override
                        public void onCancelled(DatabaseError databaseError) {
                            //Log.w(TAG, "getUser:onCancelled", databaseError.toException());
                            // ...
                        }
                    });

            // TODO: register the new account here.
            return false;
        }

        @Override
        protected void onPostExecute(final Boolean success) {
             if (isNumVerify){
                 VerifyActivity.progress.dismiss();
             }
//            mAuthTask = null;
//            showProgress(false);
//
//            if (success) {
//                finish();
//            } else {
//                mPasswordView.setError(getString(R.string.error_incorrect_password));
//                mPasswordView.requestFocus();
//            }
        }

        @Override
        protected void onCancelled() {
            mAuthTask = null;
            showProgress(false);
        }
    }

    public static void finishLogin(final Boolean success, String name, String pass,
                                   int classification, int className)
    {
        mAuthTask = null;
        showProgress(false);

        if (success) {
            String user = name + ":" + pass + ":" + classification + ":" + className;
            saveConnection(user);
            Intent i = new Intent(context, MainActivity.class);
            context.startActivity(i);
            ((Activity)context).finish();
        } else {
            mPasswordView.setError(context.getString(R.string.error_incorrect_password));
            mPasswordView.requestFocus();
        }
    }

    public static void saveConnection(String user)
    {
        SharedPreferences sharedPref = context.getSharedPreferences("strings", MODE_PRIVATE);

        String oldUser = sharedPref.getString("user","null");
        if(!oldUser.equals("null"))
            FirebaseMessaging.getInstance().unsubscribeFromTopic(getNumberAsString(sharedPref.getString("user","")));

        SharedPreferences.Editor editor = sharedPref.edit();
        editor.putBoolean("connected", true);
        editor.putString("user",user);
        editor.apply();

        FirebaseMessaging.getInstance().subscribeToTopic(getNumberAsString(sharedPref.getString("user","")));
    }

//    public String getNumberAsString(String user)
//    {
//        int i = Integer.parseInt(user.split(":")[3]);
//        if(i>100) {
//            return i - 100+"";
//        }
//        else {
//            switch (i)
//            {
//                case 1: return "admin";
//                case 2: return "staff";
//            }
//        }
//        return "";
//    }

//    private String getCharForNumber(int i) {
//        char[] dozens = "יכלמנסעפצ".toCharArray();
//        char[] units = "אבגדהוזחט".toCharArray();
//        if (i >= 100) {
//            return "-1";
//        }
//        else if (i>=10)
//            return Character.toString(dozens[i/10-1]);
//        else
//            return Character.toString(units[i-1]);
//    }

    public Boolean isAlreadyConnected()
    {
        SharedPreferences sharedPref = getSharedPreferences("strings", MODE_PRIVATE);
        if (sharedPref.getString("user","null").equals("null"))
            return false;

        return sharedPref.getBoolean("connected",false);
    }

    public static void saveEmail(String email){
        SharedPreferences sharedPref = context.getApplicationContext().getSharedPreferences("strings", MODE_PRIVATE);

        String users = sharedPref.getString("users","");

        if(!users.contains(email)) {
            SharedPreferences.Editor editor = sharedPref.edit();
            editor.putString("users", sharedPref.getString("users", "") + "," + email);
            editor.apply();
        }
    }
}

